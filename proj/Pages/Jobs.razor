@page "/jobs"
@inject NavigationManager NavigationManager
@inject IFileUpload fileUpload
@inject IWebHostEnvironment env
@inject AuthenticationStateProvider customAuthenticationStateProvider
@using BlazorInputFile

@attribute [Authorize(Roles = "Company")]
@using Entities
@using DAL
@using proj.Service

<div class="container mt-5">
    <h3 class="mb-4 text-center">Create Job</h3>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <label for="companyId" class="form-label">Company ID:</label>
                        <input type="text" id="companyId" class="form-control" @bind="newJob.CompanyID" />
                    </div>
                    <div class="form-group">
                        <label for="jobTitle" class="form-label">Job Title:</label>
                        <input type="text" id="jobTitle" class="form-control" @bind="newJob.JobTitle" />
                    </div>
                    <div class="form-group">
                        <label for="description" class="form-label">Description:</label>
                        <textarea id="description" class="form-control" rows="5" @bind="newJob.Description"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="categoryId" class="form-label">Category ID:</label>
                        <input type="text" id="categoryId" class="form-control" @bind="newJob.CatId" />
                    </div>
                    <div class="form-group">
                        <label for="fileInput" class="form-label">Thumbnail:</label>
                        <div class="input-group">
                            <div class="custom-file">
                                <Microsoft.AspNetCore.Components.Forms.InputFile type="file" id="fileInput" accept="image/*" OnChange="HandleFileChange" class="custom-file-input" aria-describedby="inputGroupFileAddon" />
                                <label class="custom-file-label" for="fileInput">Choose file</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <img class="writeImg" src="@($"data:image/png;base64,{base64String}")" alt="" />
                    </div>
                    <div class="form-check">
                        <input type="checkbox" id="isActive" class="form-check-input" @bind="newJob.IsActive" />
                        <label class="form-check-label" for="isActive">Is Active</label>
                    </div>
                    <div class="form-group">
                        <label for="currentTime" class="form-label">Current Time:</label>
                        <input type="datetime-local" id="currentTime" class="form-control" @bind="newJob.TimeUploaded" />
                    </div>

                    <!-- Add more fields as needed based on your DALJobs.cs fields -->

                    <div class="text-center">
                        <!-- Center align the button -->
                        <button @onclick="CreateJob" class="btn btn-primary mt-3">Create Job</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    EntJobs newJob = new EntJobs();
    private List<EntCategory> categories = new List<EntCategory>();

    // Method to create a new job
    protected void CreateJob()
    {
        // Save the new job using DAL method
        DALJobs.SaveJob(newJob);

        // Redirect to job listings page after creating the job
        NavigationManager.NavigateTo("/joblistings");
    }
    IFileListEntry file;
    BlazorInputFile.InputFile thumbnailFile;

    // async Task HandleFileSelected(IFileListEntry[] files)
    // {
    //     file = files.FirstOrDefault();

    //     if (file != null)
    //     {
    //         // Save the file to the server
    //         await fileUpload.UploadAsync(file, newJob);

    //         // Save the file information to the Thumbnail attribute
    //         newJob.Thumbnail = file.Name; // You can modify this based on your database schema

    //         StateHasChanged(); // Ensure that the component is re-rendered to display the file information
    //     }
    // }
    private string base64String;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(memoryStream);
                base64String = Convert.ToBase64String(memoryStream.ToArray());
                newJob.Thumbnail = base64String; // Assign base64 string to job's Thumbnail property
            }
        }
    }
}
