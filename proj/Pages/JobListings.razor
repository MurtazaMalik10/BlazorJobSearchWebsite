@page "/joblistings"
@inject NavigationManager NavigationManager

@using Entities
@using DAL
<style>
    .thumbnail-column {
        height: 200px; /* Set a fixed height for the thumbnail column */
        overflow: hidden;
    }

    .thumbnail-wrapper {
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .thumbnail-img {
        width: 100%;
        height: auto;
        object-fit: cover;
        border-radius: 5px;
    }

    .card {
        border-radius: 10px;
        transition: transform 0.3s ease-in-out;
        height: 100%; /* Set a fixed height for the cards */
    }

        .card:hover {
            transform: translateY(-5px);
        }

    ..card-body {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .job-content {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

        .job-content .card-body {
            flex: 1 1 auto;
        }

    .card-buttons {
        margin-top: auto;
    }

    .truncate-text {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        -webkit-line-clamp: 3; /* Number of lines to show before truncating */
    }
</style>

<h1 class="mb-4 text-center">Job Listings</h1>

<div class="row row-cols-1 row-cols-md-2 g-4">
    @if (jobs != null && jobs.Any())
    {
        @foreach (var job in jobs)
        {
            <div class="col mb-4">
                <div class="card h-100 shadow">
                    <div class="row g-0">
                        <div class="col-md-4">
                            <div class="thumbnail-column">
                                <div class="thumbnail-wrapper">
                                    @if (!string.IsNullOrEmpty(job.Thumbnail))
                                    {
                                        <img class="card-img-top thumbnail-img" src="@($"data:image/png;base64,{job.Thumbnail}")" alt="Thumbnail" />
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="job-content">
                                <div class="card-body">
                                    <h3 class="card-title">@job.JobTitle</h3>
                                    <p class="card-text truncate-text">@job.Description</p>
                                </div>
                                <div class="card-buttons d-flex justify-content-between align-items-end">
                                    <button class="btn btn-primary" @onclick="@(() => ViewJobDetails(job.JobId))">View Job</button>
                                    <button class="btn btn-danger" @onclick="@(() => DeleteJob(job.JobId))">Delete Job</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col">
            <p class="text-center">No jobs found.</p>
        </div>
    }
</div>
@code {
    List<EntJobs> jobs;

    protected override void OnInitialized()
    {
        // Fetch all jobs from the database
        jobs = DALJobs.GetLatestJobsWithThumbnails();
    }

    private void ViewJobDetails(int JobId)
    {
        // Redirect to ViewJob component with jobId in the URL
        NavigationManager.NavigateTo($"/viewjob/{JobId}");
    }

    private void DeleteJob(int JobId)
    {
        DALJobs.DeleteJob(JobId); // Call DAL method to delete job
        jobs = DALJobs.ShowJob(); // Refresh job list after deletion
    }
}
